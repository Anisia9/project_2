from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from utils.logger import log_callback, log_command
from services.storage_service import favorites_storage
from keyboards.inline import get_favorites_keyboard
from filters import HasTextFilter, HasImageFilter

router = Router()


@router.callback_query(F.data == "add_to_favorites")
async def add_to_favorites_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–º–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", "add_to_favorites")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ–º–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    image_url = data.get("selected_image")
    top_text = data.get("top_text", "")
    bottom_text = data.get("bottom_text", "")
    meme_url = data.get("last_meme_url")  # URL —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–µ–º–∞
    
    if not (image_url or meme_url):
        await callback.answer("‚ùå –ù–µ—Ç –º–µ–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", show_alert=True)
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–º–∞
    meme_data = {
        "url": meme_url or image_url,
        "top": top_text,
        "bottom": bottom_text,
        "created_at": str(callback.message.date) if callback.message else ""
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    if favorites_storage.add_favorite(user.id, meme_data):
        await callback.answer("‚≠ê –ú–µ–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True)
    else:
        await callback.answer("‚ö†Ô∏è –ú–µ–º —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "favorites_list")
async def favorites_list_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", "favorites_list")
    
    favorites = favorites_storage.get_favorites(user.id)
    
    if not favorites:
        try:
            if callback.message and hasattr(callback.message, 'photo') and callback.message.photo:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    "‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã:\n\n"
                    "–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç.\n"
                    "–°–æ–∑–¥–∞–≤–∞–π –º–µ–º—ã –∏ –¥–æ–±–∞–≤–ª—è–π –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                    reply_markup=get_favorites_management_keyboard()
                )
            elif callback.message:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                await callback.message.edit_text(
                    "‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã:\n\n"
                    "–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç.\n"
                    "–°–æ–∑–¥–∞–≤–∞–π –º–µ–º—ã –∏ –¥–æ–±–∞–≤–ª—è–π –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                    reply_markup=get_favorites_management_keyboard()
                )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            if callback.message:
                await callback.message.answer(
                    "‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã:\n\n"
                    "–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç.\n"
                    "–°–æ–∑–¥–∞–≤–∞–π –º–µ–º—ã –∏ –¥–æ–±–∞–≤–ª—è–π –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                    reply_markup=get_favorites_management_keyboard()
                )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ–º–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    text = f"‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã ({len(favorites)}):\n\n"
    for i, meme in enumerate(favorites):
        top_text = meme.get("top", "")
        bottom_text = meme.get("bottom", "")
        text += f"{i + 1}. "
        if top_text or bottom_text:
            if top_text:
                text += f'"{top_text}"'
            if top_text and bottom_text:
                text += " / "
            if bottom_text:
                text += f'"{bottom_text}"'
        else:
            text += "–§–æ—Ç–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"
        text += "\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –º–µ–º–æ–≤
    keyboard = []
    for i in range(len(favorites)):
        keyboard.append([
            InlineKeyboardButton(
                text=f"üëÄ –ú–µ–º {i + 1}",
                callback_data=f"favorite_show_{i}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="üé® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–µ–º",
            callback_data="new_meme"
        )
    ])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    try:
        if callback.message and hasattr(callback.message, 'photo') and callback.message.photo:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
            await callback.message.answer(
                text,
                reply_markup=reply_markup
            )
        elif callback.message:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            await callback.message.edit_text(
                text,
                reply_markup=reply_markup
            )
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if callback.message:
            await callback.message.answer(
                text,
                reply_markup=reply_markup
            )
    
    await callback.answer()


@router.callback_query(F.data == "view_favorites")
async def view_favorites_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ–º–æ–≤"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", "view_favorites")
    
    favorites = favorites_storage.get_favorites(user.id)
    
    if not favorites:
        try:
            if callback.message.photo:
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    "‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã:\n\n"
                    "–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç.\n"
                    "–°–æ–∑–¥–∞–≤–∞–π –º–µ–º—ã –∏ –¥–æ–±–∞–≤–ª—è–π –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                    reply_markup=get_favorites_management_keyboard()
                )
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                await callback.message.edit_text(
                    "‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã:\n\n"
                    "–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç.\n"
                    "–°–æ–∑–¥–∞–≤–∞–π –º–µ–º—ã –∏ –¥–æ–±–∞–≤–ª—è–π –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                    reply_markup=get_favorites_management_keyboard()
                )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                "‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã:\n\n"
                "–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç.\n"
                "–°–æ–∑–¥–∞–≤–∞–π –º–µ–º—ã –∏ –¥–æ–±–∞–≤–ª—è–π –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                reply_markup=get_favorites_management_keyboard()
            )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –º–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    await show_favorite_meme(callback, favorites, 0)


@router.callback_query(F.data.startswith("favorite_"))
async def favorite_navigation_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–º –º–µ–º–∞–º"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", f"favorite_navigation: {callback.data}")
    
    favorites = favorites_storage.get_favorites(user.id)
    
    if not favorites:
        await callback.answer("‚ùå –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç", show_alert=True)
        return
    
    action = callback.data.split("_", 1)[1]
    
    if action.startswith("show_"):
        # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
        try:
            index = int(action.split("_", 1)[1])
            await show_favorite_meme(callback, favorites, index)
        except (ValueError, IndexError):
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –º–µ–º–∞", show_alert=True)
    
    elif action.startswith("delete_"):
        # –£–¥–∞–ª–∏—Ç—å –º–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É
        try:
            index = int(action.split("_", 1)[1])
            if favorites_storage.remove_favorite(user.id, index):
                await callback.answer("üóëÔ∏è –ú–µ–º —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                updated_favorites = favorites_storage.get_favorites(user.id)
                if updated_favorites:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ–º –∏–ª–∏ –ø–µ—Ä–≤—ã–π –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π
                    new_index = min(index, len(updated_favorites) - 1)
                    await show_favorite_meme(callback, updated_favorites, new_index)
                else:
                    await view_favorites_handler(callback)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)
        except (ValueError, IndexError):
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –º–µ–º–∞", show_alert=True)
    elif action == "clear_all":
        # –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        if favorites_storage.clear_favorites(user.id):
            if callback.message:
                try:
                    if callback.message.photo:
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
                        await callback.message.answer(
                            "üóëÔ∏è –í—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã —É–¥–∞–ª–µ–Ω—ã!\n\n"
                            "–°–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –º–µ–º—ã –∏ –¥–æ–±–∞–≤–ª—è–π –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                            reply_markup=get_favorites_management_keyboard()
                        )
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
                        await callback.message.edit_text(
                            "üóëÔ∏è –í—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã —É–¥–∞–ª–µ–Ω—ã!\n\n"
                            "–°–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –º–µ–º—ã –∏ –¥–æ–±–∞–≤–ª—è–π –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                            reply_markup=get_favorites_management_keyboard()
                        )
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await callback.message.answer(
                        "üóëÔ∏è –í—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã —É–¥–∞–ª–µ–Ω—ã!\n\n"
                        "–°–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –º–µ–º—ã –∏ –¥–æ–±–∞–≤–ª—è–π –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
                        reply_markup=get_favorites_management_keyboard()
                    )
            await callback.answer("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—á–∏—â–µ–Ω–æ")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ", show_alert=True)


async def show_favorite_meme(callback: CallbackQuery, favorites: list, index: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–π –º–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    if not (0 <= index < len(favorites)):
        await callback.answer("‚ùå –ú–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if not callback.message:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return
    
    meme = favorites[index]
    meme_url = meme.get("url", "")
    top_text = meme.get("top", "")
    bottom_text = meme.get("bottom", "")
    created_at = meme.get("created_at", "")
    
    caption = f"‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–π –º–µ–º {index + 1}/{len(favorites)}\n\n"
    if top_text:
        caption += f"üìù –í–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç: {top_text}\n"
    if bottom_text:
        caption += f"üìù –ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç: {bottom_text}\n"
    if created_at:
        caption += f"üìÖ –°–æ–∑–¥–∞–Ω: {created_at}\n"
    
    keyboard = get_favorite_meme_keyboard(index, len(favorites))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    if meme_url:
        try:
            await callback.message.answer_photo(
                photo=meme_url,
                caption=caption,
                reply_markup=keyboard
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π
            await callback.message.answer(
                f"{caption}\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–º: {meme_url}",
                reply_markup=keyboard
            )
    else:
        await callback.message.answer(
            caption,
            reply_markup=keyboard
        )
    
    await callback.answer()


def get_favorite_meme_keyboard(current_index: int, total_count: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–º–∞"""
    keyboard = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = []
    if current_index > 0:
        nav_row.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
            callback_data=f"favorite_show_{current_index - 1}"
        ))
    if current_index < total_count - 1:
        nav_row.append(InlineKeyboardButton(
            text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", 
            callback_data=f"favorite_show_{current_index + 1}"
        ))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –º–µ–º–æ–º
    keyboard.append([
        InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–µ–º",
            callback_data=f"favorite_delete_{current_index}"
        )
    ])
    
    # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard.append([
        InlineKeyboardButton(
            text="üé® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–µ–º",
            callback_data="new_meme"
        )    ])
    
    keyboard.append([
        InlineKeyboardButton(
            text="üîô –ö —Å–ø–∏—Å–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
            callback_data="favorites_list"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_favorites_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                    callback_data="view_favorites"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üé® –°–æ–∑–¥–∞—Ç—å –º–µ–º",
                    callback_data="new_meme"
                )
            ]
        ]
    )
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤

@router.message(HasTextFilter())
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–∫—Å—Ç–æ–º (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ HasTextFilter)"""
    user = message.from_user
    if user:
        log_command(user.id, user.username or "unknown", "text_message")
    
    # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.text and any(word in message.text.lower() for word in ["–∫–æ—Ç", "–∫–æ—Ç–∏–∫", "–º–µ–º", "–ø–æ–º–æ—â—å"]):
        await message.answer(
            "üê± –Ø –≤–∏–∂—É, —Ç—ã –ø–∏—à–µ—à—å –æ –∫–æ—Ç–∏–∫–∞—Ö –∏–ª–∏ –º–µ–º–∞—Ö!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/randomcat - —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ç–∏–∫\n"
            "/newmeme - —Å–æ–∑–¥–∞—Ç—å –º–µ–º\n"
            "/help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
        )


@router.message(HasImageFilter())
async def handle_image_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ HasImageFilter)"""
    user = message.from_user
    if user:
        log_command(user.id, user.username or "unknown", "image_upload")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ
    if not message.photo:
        return
        
    photo = message.photo[-1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(uploaded_photo_id=photo.file_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–æ—Ç–æ
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üé® –°–æ–∑–¥–∞—Ç—å –º–µ–º –∏–∑ —ç—Ç–æ–≥–æ —Ñ–æ—Ç–æ",
                    callback_data="create_meme_from_uploaded"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                    callback_data="add_photo_to_favorites"
                )
            ]
        ]
    )
    
    await message.answer(
        "üì∏ –û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ! –ß—Ç–æ —Ö–æ—á–µ—à—å —Å –Ω–∏–º —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=keyboard
    )


@router.callback_query(F.data == "create_meme_from_uploaded")
async def create_meme_from_uploaded_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", "create_meme_from_uploaded")
    
    data = await state.get_data()
    photo_id = data.get("uploaded_photo_id")
    
    if not photo_id:
        await callback.answer("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    await callback.answer("üé® –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –º–µ–º–∞...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
    from states import MemeGenerationStates
    await state.set_state(MemeGenerationStates.entering_top_text)
    await state.update_data(selected_image=photo_id, is_uploaded_photo=True)
    
    if callback.message:
        await callback.message.answer(
            "üé® –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ —Ñ–æ—Ç–æ!\n\n"
            "–ù–∞–ø–∏—à–∏ –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞:"
        )


@router.callback_query(F.data == "add_photo_to_favorites")
async def add_uploaded_photo_to_favorites_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", "add_photo_to_favorites")
    
    data = await state.get_data()
    photo_id = data.get("uploaded_photo_id")
    
    if not photo_id:
        await callback.answer("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    photo_data = {
        "url": photo_id,  # –î–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
        "top": "",
        "bottom": "",
        "created_at": str(callback.message.date) if callback.message else "",
        "is_uploaded": True
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    if favorites_storage.add_favorite(user.id, photo_data):
        await callback.answer("‚≠ê –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True)
    else:
        await callback.answer("‚ö†Ô∏è –§–æ—Ç–æ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
