from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from keyboards.inline import (
    get_random_cat_keyboard, 
    get_favorites_keyboard, 
    get_meme_start_keyboard,
    get_meme_result_keyboard,
    get_meme_confirm_keyboard
)
from utils.logger import log_callback
from services.api_client import get_random_cat_image, cat_cache, download_meme_as_bytes, generate_working_meme
from services.storage_service import favorites_storage
from states import MemeGenerationStates
import random

router = Router()


@router.callback_query(F.data == "more_cat")
async def more_cat_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ï—â—ë –∫–æ—Ç–∞!'"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", "more_cat")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É —á–µ—Ä–µ–∑ API
    cat_url = await get_random_cat_image()
    
    if cat_url:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
        if callback.message:
            await callback.message.answer_photo(
                photo=cat_url,
                caption="üê± –ï—â—ë –æ–¥–∏–Ω –∫–æ—Ç–∏–∫ –¥–ª—è —Ç–µ–±—è!",
                reply_markup=get_random_cat_keyboard()
            )
        await callback.answer("–ù–æ–≤—ã–π –∫–æ—Ç–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω! üêæ")
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞", show_alert=True)


@router.callback_query(F.data == "create_meme_with_current")
async def create_meme_with_current_callback(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –º–µ–º —Å —Ç–µ–∫—É—â–∏–º –∫–æ—Ç–æ–º"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", "create_meme_with_current")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
    cached_images = list(cat_cache)
    if cached_images:
        selected_image = cached_images[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await state.update_data(selected_image=selected_image)
        await state.set_state(MemeGenerationStates.entering_top_text)
        
        if callback.message:
            await callback.message.answer(
                "üé® –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞:"
            )
        await callback.answer()
    else:
        await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ", show_alert=True)


@router.callback_query(F.data == "random_cat_for_meme")
async def random_cat_for_meme_callback(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—Ç–∞ –¥–ª—è –º–µ–º–∞"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", "random_cat_for_meme")
    
    cat_url = await get_random_cat_image()
    if cat_url:
        await state.update_data(selected_image=cat_url)
        await state.set_state(MemeGenerationStates.entering_top_text)
        
        if callback.message:
            await callback.message.answer_photo(
                photo=cat_url,
                caption="üé® –ö–æ—Ç–∏–∫ –≤—ã–±—Ä–∞–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞:"
            )
        await callback.answer()
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", show_alert=True)


@router.callback_query(F.data == "confirm_meme")
async def confirm_meme_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", "confirm_meme")
    
    data = await state.get_data()
    image_url = data.get("selected_image")
    top_text = data.get("top_text", "")
    bottom_text = data.get("bottom_text", "")
    
    if not image_url:
        await callback.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    await callback.answer("üé® –°–æ–∑–¥–∞—é –º–µ–º...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ–º
    meme_url = await generate_working_meme(image_url, top_text, bottom_text)
    
    if meme_url:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–µ–º–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        await state.update_data(last_meme_url=meme_url)
        
        if callback.message:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
                await callback.message.answer_photo(
                    photo=meme_url,
                    caption=f"üéâ –¢–≤–æ–π –º–µ–º –≥–æ—Ç–æ–≤!\n\nüìù –í–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç: {top_text}\nüìù –ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç: {bottom_text}",
                    reply_markup=get_meme_result_keyboard()
                )
            except Exception as e:
                # –ï—Å–ª–∏ URL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–∞–π–ª
                try:
                    meme_bytes = await download_meme_as_bytes(meme_url)
                    if meme_bytes:
                        meme_file = BufferedInputFile(meme_bytes, filename="meme.png")
                        await callback.message.answer_photo(
                            photo=meme_file,
                            caption=f"üéâ –¢–≤–æ–π –º–µ–º –≥–æ—Ç–æ–≤!\n\nüìù –í–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç: {top_text}\nüìù –ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç: {bottom_text}",
                            reply_markup=get_meme_result_keyboard()
                        )
                    else:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                except Exception as e2:
                    # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                    await callback.message.answer(
                        f"üéâ –¢–≤–æ–π –º–µ–º –≥–æ—Ç–æ–≤!\n\n"
                        f"üìù –í–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç: {top_text}\n"
                        f"üìù –ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç: {bottom_text}\n\n"
                        f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–º: {meme_url}\n\n"
                        f"‚ö†Ô∏è Telegram –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, "
                        f"–Ω–æ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ–º.",
                        reply_markup=get_meme_result_keyboard()
                    )
        # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—Å—Ç–∏—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –º–µ–º–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ
    else:
        if callback.message:
            await callback.message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
                reply_markup=get_meme_start_keyboard()
            )


@router.callback_query(F.data == "cancel_meme")
async def cancel_meme_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", "cancel_meme")
    
    await state.clear()
    
    if callback.message:
        await callback.message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–ò—Å–ø–æ–ª—å–∑—É–π /newmeme, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
    await callback.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@router.callback_query(F.data == "new_meme")
async def new_meme_callback(callback: CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–µ–º"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", "new_meme")
    
    await state.clear()
    
    if callback.message:
        await callback.message.answer(
            "üé® –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –º–µ–º!\n\n–í—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            reply_markup=get_meme_start_keyboard()
        )
    await callback.answer()


@router.callback_query(F.data == "add_favorite")
async def add_favorite_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", "add_favorite")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ–º–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    image_url = data.get("selected_image")
    top_text = data.get("top_text", "")
    bottom_text = data.get("bottom_text", "")
    meme_url = data.get("last_meme_url")  # URL —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–µ–º–∞
    
    if not (image_url or meme_url):
        await callback.answer("‚ùå –ù–µ—Ç –º–µ–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", show_alert=True)
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–º–∞
    meme_data = {
        "url": meme_url or image_url,
        "top": top_text,
        "bottom": bottom_text,
        "created_at": str(callback.message.date) if callback.message else ""
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    if favorites_storage.add_favorite(user.id, meme_data):
        await callback.answer("‚≠ê –ú–µ–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True)
    else:
        await callback.answer("‚ö†Ô∏è –ú–µ–º —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "refresh_favorites")
async def refresh_favorites_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫' –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º"""
    user = callback.from_user
    if user:
        log_callback(user.id, user.username or "unknown", "refresh_favorites")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ–º–æ–≤
    favorites = favorites_storage.get_favorites(user.id)
    
    if not favorites:
        updated_text = (
            "‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ):\n\n"
            "–°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç.\n"
            "–°–æ–∑–¥–∞–≤–∞–π –º–µ–º—ã –∏ –¥–æ–±–∞–≤–ª—è–π –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
        )
    else:
        updated_text = (
            f"‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã ({len(favorites)} —à—Ç.):\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö!"
        )
    
    keyboard = get_favorites_keyboard()
    if favorites:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–º–æ–≤
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–º—ã",
                        callback_data="view_favorites"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                        callback_data="refresh_favorites"
                    )
                ]
            ]
        )
    
    if callback.message:
        try:
            await callback.message.edit_text(
                updated_text,
                reply_markup=keyboard
            )
        except Exception:
            await callback.message.answer(
                updated_text,
                reply_markup=keyboard
            )
    
    await callback.answer("–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω! üîÑ")
