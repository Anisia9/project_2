from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from keyboards.inline import get_random_cat_keyboard, get_favorites_keyboard, get_meme_start_keyboard, get_meme_confirm_keyboard
from utils.logger import log_command
from services.api_client import get_random_cat_image, test_apis
from services.storage_service import favorites_storage
from states import MemeGenerationStates
import random

router = Router()

# –°–ø–∏—Å–æ–∫ URL-–æ–≤ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∫–æ—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
CAT_IMAGES_FALLBACK = [
    "https://cdn2.thecatapi.com/images/bpc.jpg",
    "https://cdn2.thecatapi.com/images/eac.jpg",
    "https://cdn2.thecatapi.com/images/dho.jpg",
    "https://cdn2.thecatapi.com/images/MTk3ODg4MA.jpg",
    "https://cdn2.thecatapi.com/images/cml.jpg"
]


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await state.clear()
    
    user = message.from_user
    if user:
        log_command(user.id, user.username or "unknown", "/start")
        user_name = user.first_name
    else:
        user_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üê±\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Cat Meme Bot!\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ–º—ã —Å –∫–æ—Ç–∏–∫–∞–º–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
        "/randomcat - —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ç–∏–∫\n"
        "/newmeme - —Å–æ–∑–¥–∞—Ç—å –º–µ–º\n"
        "/favorites - –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã\n"
        "/test - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API\n\n"
        "–¢–µ–∫—Å—Ç –≤ –º–µ–º–∞—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!"
    )
    
    await message.answer(welcome_text)


@router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user = message.from_user
    if user:
        log_command(user.id, user.username or "unknown", "/help")
    
    help_text = (
        "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/randomcat - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ç–∞\n"
        "/newmeme - —Å–æ–∑–¥–∞—Ç—å –º–µ–º —Å –∫–æ—Ç–æ–º (FSM –ø—Ä–æ—Ü–µ—Å—Å)\n"
        "/favorites - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –º–µ–º—ã\n"
        "/test - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É API\n\n"
        "üé® –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞:\n"
        "1. –í—ã–±–µ—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞\n"
        "2. –í–≤–µ–¥–∏ –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç\n"
        "3. –í–≤–µ–¥–∏ –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç\n"
        "4. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π –º–µ–º!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏! üêæ\n\n"
        "–¢–µ–∫—Å—Ç –≤ –º–µ–º–∞—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ!"
    )
    
    await message.answer(help_text)


@router.message(Command("randomcat"))
async def random_cat_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /randomcat"""
    user = message.from_user
    if user:
        log_command(user.id, user.username or "unknown", "/randomcat")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ API
    cat_url = await get_random_cat_image()
    
    # –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    if not cat_url:
        cat_url = random.choice(CAT_IMAGES_FALLBACK)
        caption = "üê± –ö–æ—Ç–∏–∫ –∏–∑ –∫—ç—à–∞ (API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)"
    else:
        caption = "üê± –°–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ç–∏–∫ –¥–ª—è —Ç–µ–±—è!"
    
    await message.answer_photo(
        photo=cat_url,
        caption=caption,
        reply_markup=get_random_cat_keyboard()
    )


@router.message(Command("newmeme"))
async def new_meme_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newmeme"""
    user = message.from_user
    if user:
        log_command(user.id, user.username or "unknown", "/newmeme")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await state.set_state(MemeGenerationStates.choosing_image)
    
    await message.answer(
        "üé® –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–º–∞ —Å –∫–æ—Ç–æ–º!\n\n"
        "–í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∞:",
        reply_markup=get_meme_start_keyboard()
    )


@router.message(Command("favorites"))
async def favorites_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /favorites"""
    user = message.from_user
    if user:
        log_command(user.id, user.username or "unknown", "/favorites")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    favorites = favorites_storage.get_favorites(user.id)
    
    if not favorites:
        favorites_text = (
            "‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã:\n\n"
            "–ü–æ–∫–∞ —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.\n"
            "–°–æ–∑–¥–∞–≤–∞–π –º–µ–º—ã –∏ –¥–æ–±–∞–≤–ª—è–π –∏—Ö –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
        )
        keyboard = get_favorites_keyboard()
    else:
        favorites_text = (
            f"‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ–º—ã ({len(favorites)} —à—Ç.):\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö!"
        )
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–º—ã",
                        callback_data="view_favorites"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                        callback_data="refresh_favorites"
                    )
                ]
            ]
        )
    
    await message.answer(
        favorites_text,
        reply_markup=keyboard
    )


@router.message(Command("test"))
async def test_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test - –ø—Ä–æ–≤–µ—Ä–∫–∞ API"""
    user = message.from_user
    if user:
        log_command(user.id, user.username or "unknown", "/test")
    
    await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...")
      # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    results = await test_apis()
    status_text = "üìä –°—Ç–∞—Ç—É—Å API:\n\n"
    status_text += f"üê± The Cat API: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if results['cat_api'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}\n"
    status_text += f"üé® Memegen.link: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if results['memegen'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}\n\n"
    
    working_apis = sum(results.values())
    if working_apis == len(results):
        status_text += "–í—Å–µ API —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ! üéâ"
    elif working_apis > 0:
        status_text += f"–†–∞–±–æ—Ç–∞–µ—Ç {working_apis}/{len(results)} API. –ë–æ—Ç –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è! üí™"
    else:
        status_text += "–í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫–∏. üòø"
    
    await message.answer(status_text)

# FSM Text Handlers

@router.message(MemeGenerationStates.entering_top_text)
async def process_top_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –º–µ–º–∞"""
    user = message.from_user
    if user:
        log_command(user.id, user.username or "unknown", f"top_text: {message.text}")
    
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç
    await state.update_data(top_text=message.text)
    await state.set_state(MemeGenerationStates.entering_bottom_text)
    
    await message.answer(
        f"‚úÖ –í–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: '{message.text}'\n\n"
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞:"
    )


@router.message(MemeGenerationStates.entering_bottom_text)
async def process_bottom_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∂–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –º–µ–º–∞"""
    user = message.from_user
    if user:
        log_command(user.id, user.username or "unknown", f"bottom_text: {message.text}")
    
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç
    await state.update_data(bottom_text=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    top_text = data.get("top_text", "")
    bottom_text = message.text
    image_url = data.get("selected_image")
    
    if not image_url:
        await message.answer(
            "‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /newmeme",
            reply_markup=get_meme_start_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –º–µ–º–∞
    preview_text = (
        f"üé® –ü—Ä–µ–≤—å—é –º–µ–º–∞:\n\n"
        f"üìù –í–µ—Ä—Ö–Ω–∏–π —Ç–µ–∫—Å—Ç: '{top_text}'\n"
        f"üìù –ù–∏–∂–Ω–∏–π —Ç–µ–∫—Å—Ç: '{bottom_text}'\n\n"
        f"–í—Å—ë –≤–µ—Ä–Ω–æ? –°–æ–∑–¥–∞—ë–º –º–µ–º?"
    )
    
    await message.answer(
        preview_text,
        reply_markup=get_meme_confirm_keyboard()
    )


@router.message(Command("cancel"))
async def cancel_command(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å FSM"""
    user = message.from_user
    if user:
        log_command(user.id, user.username or "unknown", "/cancel")
    
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    await state.clear()
    await message.answer(
        "‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞ –æ—Ç–º–µ–Ω—ë–Ω.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /newmeme, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
    )
